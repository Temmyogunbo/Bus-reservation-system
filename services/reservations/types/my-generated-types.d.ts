/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Booking: { // root type
    departFrom: string; // String!
    departTo: string; // String!
    departureDate: string; // String!
    id: number; // Int!
    seatNo: number; // Int!
    userId: string; // String!
    vehicleId: number; // Int!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
  }
  Vehicle: { // root type
    color: string; // String!
    id: number; // Int!
    model: string; // String!
    name: string; // String!
    numberOfSeats: number; // Int!
    yearOfManufacture: string; // String!
  }
  Node: NexusGenRootTypes['User'] | NexusGenRootTypes['Booking'] | NexusGenRootTypes['Vehicle'];
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  Booking: { // field return type
    departFrom: string; // String!
    departTo: string; // String!
    departureDate: string; // String!
    id: number; // Int!
    seatNo: number; // Int!
    userId: string; // String!
    vehicleId: number; // Int!
  }
  Mutation: { // field return type
    createBooking: NexusGenRootTypes['Booking']; // Booking!
    signup: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    users: NexusGenRootTypes['User'] | null; // User
    vehicles: NexusGenRootTypes['Vehicle'] | null; // Vehicle
  }
  User: { // field return type
    bookings: NexusGenRootTypes['Booking'][] | null; // [Booking!]
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
  }
  Vehicle: { // field return type
    color: string; // String!
    id: number; // Int!
    model: string; // String!
    name: string; // String!
    numberOfSeats: number; // Int!
    yearOfManufacture: string; // String!
  }
  Node: { // field return type
    id: number; // Int!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createBooking: { // args
      departFrom: string; // String!
      departTo: string; // String!
      departureDate: string; // String!
      seatNo: number; // Int!
      userId: string; // String!
      vehicleId: number; // Int!
    }
    signup: { // args
      firstName: string; // String!
      lastName: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  Node: "User" | "Booking" | "Vehicle"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Booking" | "Mutation" | "Query" | "User" | "Vehicle";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = "Node";

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}